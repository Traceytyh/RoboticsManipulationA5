% Read the position of the dynamixel horn with the torque off
% The code executes for a given amount of time then terminates
 
 
clc;

lib_name = '';
 
if strcmp(computer, 'PCWIN')
  lib_name = 'dxl_x86_c';
elseif strcmp(computer, 'PCWIN64')
  lib_name = 'dxl_x64_c';
elseif strcmp(computer, 'GLNX86')
  lib_name = 'libdxl_x86_c';
elseif strcmp(computer, 'GLNXA64')
  lib_name = 'libdxl_x64_c';
elseif strcmp(computer, 'MACI64')
  lib_name = 'libdxl_mac_c';
end
 
% Load Libraries
if ~libisloaded(lib_name)
    [notfound, warnings] = loadlibrary(lib_name, 'dynamixel_sdk.h', 'addheader', 'port_handler.h', 'addheader', 'packet_handler.h');
end
 
%% ---- Control Table Addresses ---- %%
 
ADDR_PRO_TORQUE_ENABLE       = 64;           % Control table address is different in Dynamixel model
ADDR_PRO_GOAL_POSITION       = 116; 
ADDR_PRO_PRESENT_POSITION    = 132; 
ADDR_PRO_OPERATING_MODE      = 11;
ADDR_PRO_PROFILE_VELOCITY = 112;
ADDR_PRO_PROFILE_ACCELERATION = 108;
 
%% ---- Other Settings ---- %%
 
% Protocol version
PROTOCOL_VERSION            = 2.0;          % See which protocol version is used in the Dynamixel
 
% Default setting
DXL_ID1                     = 11; 
DXL_ID2                     = 12; 
DXL_ID3                     = 13;
DXL_ID4                     = 14;
DXL_ID5                     = 15;% Dynamixel ID: 1
BAUDRATE                    = 115200;
DEVICENAME                  = 'COM9';       % Check which port is being used on your controller
                                            % ex) Windows: 'COM1'   Linux: '/dev/ttyUSB0' Mac: '/dev/tty.usbserial-*'
TORQUE_ENABLE               = 1;            % Value for enabling the torque
TORQUE_DISABLE              = 0;            % Value for disabling the torque
DXL_MINIMUM_POSITION_VALUE  = -150000;      % Dynamixel will rotate between this value
DXL_MAXIMUM_POSITION_VALUE  = 150000;       % and this value (note that the Dynamixel would not move when the position value is out of movable range. Check e-manual about the range of the Dynamixel you use.)
DXL_MOVING_STATUS_THRESHOLD = 20;           % Dynamixel moving status threshold
 
ESC_CHARACTER               = 'e';          % Key for escaping loop
 
COMM_SUCCESS                = 0;            % Communication Success result value
COMM_TX_FAIL                = -1001;        % Communication Tx Failed
 
%% ------------------ %%
 
% Initialize PortHandler Structs
% Set the port path
% Get methods and members of PortHandlerLinux or PortHandlerWindows
port_num = portHandler(DEVICENAME);
 
% Initialize PacketHandler Structs
packetHandler();
 
index = 1;
dxl_comm_result = COMM_TX_FAIL;           % Communication result
dxl_goal_position = [DXL_MINIMUM_POSITION_VALUE DXL_MAXIMUM_POSITION_VALUE];         % Goal position
 
dxl_error = 0;                              % Dynamixel error
dxl_present_position = 0;                   % Present position
 
ADDR_GOAL_CURRENT            = 102;   % 2BYTE

% ----- SET MOTION LIMITS ----------- %
ADDR_MAX_POS = 48;
ADDR_MIN_POS = 52;
%MAX_POS = 3400;
%MIN_POS = 600;
DXL_ID1_MIN_POS = 0000;  % Min and max for DXL_ID1
DXL_ID1_MAX_POS = 4000;
DXL_ID2_MIN_POS = 0750;  % Min and max for DXL_ID2
DXL_ID2_MAX_POS = 3310;
DXL_ID3_MIN_POS = 0690;  % Min and max for DXL_ID3
DXL_ID3_MAX_POS = 3050;
DXL_ID4_MIN_POS = 0837;  % Min and max for DXL_ID4
DXL_ID4_MAX_POS = 3463;
DXL_ID5_MIN_POS = 3530;  % Min and max for DXL_ID5
DXL_ID5_MAX_POS = 6714;

% Theta limits
THETA1_MIN = -180;
THETA1_MAX =  180;
THETA3_MIN = -193;
THETA3_MAX =   32;
THETA4_MIN =  -39;
THETA4_MAX =  169;
THETA5_MIN = -106;
THETA5_MAX =  125;

% Open port
if (openPort(port_num))
    fprintf('Port Open\n');
else
    unloadlibrary(lib_name);
    fprintf('Failed to open the port\n');
    input('Press any key to terminate...\n');
    return;
end

% Set port baudrate
if (setBaudRate(port_num, BAUDRATE))
    fprintf('Baudrate Set\n');
else
    unloadlibrary(lib_name);
    fprintf('Failed to change the baudrate!\n');
    input('Press any key to terminate...\n');
    return;
end

dxl_comm_result = getLastTxRxResult(port_num, PROTOCOL_VERSION);
dxl_error = getLastRxPacketError(port_num, PROTOCOL_VERSION);
 
if dxl_comm_result ~= COMM_SUCCESS
    fprintf('%s\n', getTxRxResult(PROTOCOL_VERSION, dxl_comm_result));
elseif dxl_error ~= 0
    fprintf('%s\n', getRxPacketError(PROTOCOL_VERSION, dxl_error));
else
    fprintf('Dynamixel has been successfully connected \n');
end
 
dxl_comm_result = getLastTxRxResult(port_num, PROTOCOL_VERSION);
    dxl_error = getLastRxPacketError(port_num, PROTOCOL_VERSION);
    if dxl_comm_result ~= COMM_SUCCESS
        fprintf('%s\n', getTxRxResult(PROTOCOL_VERSION, dxl_comm_result)); %print result
    elseif dxl_error ~= 0
        fprintf('%s\n', getRxPacketError(PROTOCOL_VERSION, dxl_error));
    end

% Set max position limit
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_MAX_POS, DXL_ID1_MAX_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_MAX_POS, DXL_ID2_MAX_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_MAX_POS, DXL_ID3_MAX_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_MAX_POS, DXL_ID4_MAX_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_MAX_POS, DXL_ID5_MAX_POS);
% Set min position limit
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_MIN_POS, DXL_ID1_MIN_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_MIN_POS, DXL_ID2_MIN_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_MIN_POS, DXL_ID3_MIN_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_MIN_POS, DXL_ID4_MIN_POS);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_MIN_POS, DXL_ID5_MIN_POS);
 
% Put actuator into Position Control Mode
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_OPERATING_MODE, 3);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_OPERATING_MODE, 3);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_OPERATING_MODE, 3);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_OPERATING_MODE, 3);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_OPERATING_MODE, 5);
write2ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_GOAL_CURRENT, 350);

% Enable Dynamixel Torque
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_TORQUE_ENABLE, 1);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_TORQUE_ENABLE, 1);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_TORQUE_ENABLE, 1);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_TORQUE_ENABLE, 1);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_TORQUE_ENABLE, 1);

%Set profile acceleration and velocity
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_PROFILE_VELOCITY, 300);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_PROFILE_VELOCITY, 300);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_PROFILE_VELOCITY, 300);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_PROFILE_VELOCITY, 300);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_PROFILE_VELOCITY, 300);

write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_PROFILE_ACCELERATION, 100);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_PROFILE_ACCELERATION, 100);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_PROFILE_ACCELERATION, 100);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_PROFILE_ACCELERATION, 100);
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_PROFILE_ACCELERATION, 100);
%% ------------------ SET UP COMPLETE ---------------------%%

 %% ------------------ OPEN GRIPPER ---------------------%%
dxl_present_position5 = read4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_PRESENT_POSITION);
closed = 2500;
open = 1200;
opening = linspace(dxl_present_position5, open, 10);
for i = 1:length(opening)
    write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_GOAL_POSITION, opening(i));
end

%% ------------------ GO TO PICK UP PEN POSITION FROM ARBITRARY STARTING POSITION---------------------%%
%Read position of servos
position1 = read4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_PRESENT_POSITION);
position3 = read4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_PRESENT_POSITION);
position4 = read4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_PRESENT_POSITION);
position5 = read4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_PRESENT_POSITION);
%Forward kinematics to find current positions
thetafix = asin(0.024/0.13)/pi*180;
theta1 = (position1 - 2048)/2048*180;
theta3 = (position3 - 2048)/2048*180 - 90 + thetafix;
theta4 = (position4 - 2048)/2048*180 + 90 - thetafix;
theta5 = (position5 - 2048)/2048*180;
r = 130*cosd(theta3)+124*cosd(theta3+theta4)+126*cosd(theta3+theta4+theta5);
x_from = r*cosd(theta1);
y_from = r*sind(theta1);
z_from = 77+130*sind(theta3)+124*sind(theta3+theta4)+126*sind(theta3+theta4+theta5);
angle_from = theta3+theta4+theta5;
%Define starting positions
x_to = 109;
y_to = 0;
z_to = 90;
angle_to = 0;
resolution = 50;
    
    xpick = zeros(1, resolution);
    ypick = zeros(1, resolution);
    zpick = zeros(1, resolution);
    anglepick = zeros(1, resolution);

    j = 0;
    for i = (1 :resolution)
            xpick(i) = x_to + 3/resolution^2*(x_to-x_from)*j^2 - 2/resolution^3*(x_to-x_from)*j^3;
            ypick(i) = y_to + 3/resolution^2*(y_to-y_from)*j^2 - 2/resolution^3*(y_to-y_from)*j^3;
            zpick(i) = z_to + 3/resolution^2*(z_to-z_from)*j^2 - 2/resolution^3*(z_to-z_from)*j^3;
            anglepick(i) = angle_to + 3/resolution^2*(angle_to-angle_from)*j^2 - 2/resolution^3*(angle_to-angle_from)*j^3;
        j = j + 1;
    end

    % Perform IK
    [position1, position2, position3, position4] = IK(xpick, ypick, zpick, anglepick); 
    for i = 1:size(position1)
        write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_GOAL_POSITION, position1(i));
        write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_GOAL_POSITION, position2(i));
        write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_GOAL_POSITION, position3(i));
        write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_GOAL_POSITION, position4(i));
    end
pause(1)

%% ------------------ ALLOW PEN TO BE GRABBED ---------------------%%
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_GOAL_POSITION, closed);
pause(3)

%% ------------------ BEGIN TRAJECTORY USING PREVIOUS TRAJECTORY CODES ---------------------%%
x_desired = xTraj;
y_desired = yTraj;
z_desired = zTraj;
[irow,icol] = size(x_desired);
angle_desired = zeros(1, icol);

[position1, position2, position3, position4] = IK(x_desired, y_desired, z_desired, angle_desired);

for i = 1:icol
    write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_GOAL_POSITION, position1(i));
    write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_GOAL_POSITION, position2(i));
    write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_GOAL_POSITION, position3(i));
    write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_GOAL_POSITION, position4(i));
end

%% ------------------ RETURNED TO PEN HOLDER, RELEASE ---------------------%%
pause(1)
write4ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_GOAL_POSITION, open);

% Disable Dynamixel Torque
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID1, ADDR_PRO_TORQUE_ENABLE, 0);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID2, ADDR_PRO_TORQUE_ENABLE, 0);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID3, ADDR_PRO_TORQUE_ENABLE, 0);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID4, ADDR_PRO_TORQUE_ENABLE, 0);
write1ByteTxRx(port_num, PROTOCOL_VERSION, DXL_ID5, ADDR_PRO_TORQUE_ENABLE, 0);

% Close port
closePort(port_num);
fprintf('Port Closed \n');
 
% Unload Library
unloadlibrary(lib_name);
 
close all;

function [position1, position2, position3, position4] = IK(x_desired, y_desired, z_desired, angle_desired)
    a3 = 130;
    a4 = 124;
    a5 = 126;
    d2 = 77;
    
    THETA1_MIN = -180;
    THETA1_MAX =  180;
    THETA3_MIN = -193;
    THETA3_MAX =   32;
    THETA4_MIN =  -39;
    THETA4_MAX =  169;
    THETA5_MIN = -106;
    THETA5_MAX =  125;
    
    r_desired = sqrt(y_desired.^2 + x_desired.^2);
    [irow,icol] = size(x_desired);
    
    theta1 = zeros(1, icol);
    theta3 = zeros(1, icol);
    theta4 = zeros(1, icol);
    theta5 = zeros(1, icol);
    
    for i = 1:icol
        theta1(i) = atan2d(y_desired(i), x_desired(i));
    
        r3 = r_desired(i) - a5*cosd(angle_desired(i));
        z3 = z_desired(i) + a5*sind(angle_desired(i)) - d2;
        h3 = sqrt(r3^2 + z3^2);
        
        if (a3+a4) >= h3
            %angle a and B
            a = acosd((a3^2 + a4^2 - h3^2 )/(2*a3*a4));
            B = acosd((a3^2 + h3^2 - a4^2 )/(2*a3*h3));
    
            %joint angles elbow-down
            J1a = -(atan2d(z3,r3)+B);
            J2a = 180-a;
            J3a = angle_desired(i) - J1a -J2a;
        
            %joint angles elbow-up
            J1b = -(atan2d(z3,r3)-B);
            J2b = a-180;
            J3b = angle_desired(i) - J1b - J2b;
    
            if (THETA3_MIN < J1b) && (J1b< THETA3_MAX) && (THETA4_MIN < J2b) && (J2b< THETA4_MAX) &&(THETA5_MIN < J3b) && (J3b< THETA5_MAX) 
                theta3(i) = 1*J1b;
                theta4(i) = 1*J2b;
                theta5(i) = 1*J3b;
            else
                theta3(i) = 1*J1a;
                theta4(i) = 1*J2a;
                theta5(i) = 1*J3a;
            end
            
        else
            disp("out of bound");
            if i ~=1
               theta3(i) = theta3(i - 1);
               theta4(i) = theta4(i - 1);
               theta5(i) = theta5(i - 1);
            end
        end
    end
    thetafix = asin(0.024/0.13)/pi*180;
    position1 = theta1./180 .* 2048 + 2048;
    position2 = (theta3 - thetafix + 90)./180 .* 2048 + 2048;
    position3 = (theta4+ thetafix - 90)./180 .* 2048 + 2048;
    position4 = theta5./180 .* 2048 + 2048;
end
